/// <reference types="node" />
import { IActionRootRdfParse, IActorOutputRootRdfParse, IActorTestRootRdfParse } from "@comunica/bus-rdf-parse";
import { Actor, Mediator } from "@comunica/core";
import * as RDF from "rdf-js";
/**
 * An RdfParser can parse any RDF serialization, based on a given content type.
 */
export declare class RdfParser<Q extends RDF.BaseQuad = RDF.Quad> {
    private static readonly CONTENT_MAPPINGS;
    readonly mediatorRdfParseMediatypes: Mediator<Actor<IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>;
    readonly mediatorRdfParseHandle: Mediator<Actor<IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>;
    constructor(args: IRdfParserArgs);
    /**
     * Get an array of all available content types for this parser.
     * @return {Promise<string[]>} A promise resolving to a string array of all content types.
     */
    getContentTypes(): Promise<string[]>;
    /**
     * Get a hash of all available content types for this parser, mapped to a numerical priority.
     * @return {Promise<{[p: string]: number}>} A promise resolving to a hash mapping content type to a priority number.
     */
    getContentTypesPrioritized(): Promise<{
        [contenType: string]: number;
    }>;
    /**
     * Parse the given stream.
     * @param {NodeJS.ReadableStream} stream A string stream.
     * @param {IParseOptions} options Parsing options.
     * @return {Stream} An RDFJS quad stream.
     */
    parse(stream: NodeJS.ReadableStream, options: ParseOptions): RDF.Stream;
    /**
     * Get the content type based on the extension of the given path,
     * which can be an URL or file path.
     * @param {string} path A path.
     * @return {string} A content type or the empty string.
     */
    protected getContentTypeFromExtension(path: string): string;
}
export interface IRdfParserArgs {
    mediatorRdfParseMediatypes: Mediator<Actor<IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>;
    mediatorRdfParseHandle: Mediator<Actor<IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>, IActionRootRdfParse, IActorTestRootRdfParse, IActorOutputRootRdfParse>;
}
export declare type ParseOptions = {
    /**
     * The content type of the incoming stream.
     */
    contentType: string;
    /**
     * An optional base IRI of stream's document.
     */
    baseIRI?: string;
} | {
    /**
     * The file name or URL that is being parsed.
     */
    path: string;
    /**
     * An optional base IRI of stream's document.
     */
    baseIRI?: string;
};
