import * as encode from './encode';
export const arc = {
    vgMark: 'arc',
    encodeEntry: (model) => {
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, encode.baseEncodeEntry(model, {
            align: 'ignore',
            baseline: 'ignore',
            color: 'include',
            size: 'ignore',
            orient: 'ignore'
        })), encode.pointPosition('x', model, { defaultPos: 'mid' })), encode.pointPosition('y', model, { defaultPos: 'mid' })), encode.arcRangePosition(model, {
            channel: 'radius',
            vgChannel: 'outerRadius',
            vgChannel2: 'innerRadius',
            defaultRef: defaultOuterRadius(model)
        })), encode.arcRangePosition(model, {
            channel: 'theta',
            vgChannel: 'startAngle',
            vgChannel2: 'endAngle',
            defaultRef: { signal: 'PI * 2' }
        }));
    }
};
function defaultOuterRadius(model) {
    // radius = min(width,height)/2
    return {
        signal: `min(${model.width.signal},${model.height.signal})/2`
    };
}
//# sourceMappingURL=arc.js.map